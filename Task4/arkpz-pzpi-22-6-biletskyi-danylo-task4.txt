Харківський національний університет радіоелектроніки 
Факультет комп’ютерних наук 
Кафедра програмної інженерії 
 
 
 
 
ЗВІТ 
до лабораторного заняття №4 з дисципліни 
“Аналіз та рефакторинг коду” 
 
 
 
 
	Виконав:  	 	Перевірив: 
	ст. гр. ПЗПІ-22-6 	 	Ст. викл. кат. ПІ  
	Білецький Д. А. 	Сокорчук І.П. 
 
 
 
 
 
 
Харків 2024
1.	РОЗРОБКА ІоТ КЛІЄНТА (БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ НАЛАШТУВАННЯ)
2.	Мета роботи 
	Розробити програмне забезпечення для IoT або SmartDevice пристрою, створеного на базі будь-якої поширеної на сьогодні платформи, придатної для реалізації  вбудованих систем. 
3.	Хід роботи:
3.1. Розробити будову програмного забзепечення ІоТ клієнта:
Програмне забезпечення ІоТ клієнта було розроблене за допомогою мови програмування С++, а також бібліотеки для http-запитів та бібліотеки для обробки даних у форматі json. Основним завданням ІоТ клієнта є моделювання роботи сенсорів вологості та температури складського приміщення в якому зберігаються медикаменти. Дані, згенеровані сенсорами будуть надсилатися до серверу, для подальшої обробки.

3.2. Створити UML діаграму прецедентів для ІоТ клієнта:
Рисунок 1 – UML діаграма прецедентів для ІоТ клієнта

3.3. Розробити бізнес логіку (математичну обробку пов’язаних із предметною областю даних) та функції налаштування ІоТ клієнта:
Була розроблена бізнес логіка обробки даних ІоТ. В ході розробки я налаштував перетворення даних температури від кельвінів до градусів Цельсію. В якості встановлення налаштувань ІоТ клієнту використовується JSON файл налаштування.
Приклад коду математичної обробки даних наведений у додатку А.
Приклад коду використання конфігурації з файлу JSON наведений у файлу Б.

3.4. Створити діаграму діяльності для ІоТ клієнта:
 
Рисунок 2 -  діаграма діяльності для ІоТ клієнта
Посилання на ютуб:
https://youtu.be/_QR0ffTPUOc
Посилання на гітхаб:
https://github.com/NureBiletskyiDanylo/arkpz-pzpi-22-6-biletskyi-danylo/tree/main/Task4

Висновок:
В ході виконання даної лабораторної роботи було розроблено бізнес-логіку та функції адміністрування серверної частини програмної системи. Були вчинені заходи для забезпечення автентифікації та авторизації користувачів за допомогою JSON Web Token.
ДОДАТОК А
1. void Sensor::generateRandomValue() {
2.     std::random_device rd;
3.     std::mt19937 gen(rd());
4.     if (type == 0) {
5.         std::uniform_real_distribution<> dist(253.15, 323.15);
6.         currentValue = dist(gen);
7.         currentValue = convertKelvinToCelsius(currentValue);
8.     } else if (type == 1) {
9.         std::uniform_real_distribution<> dist(0.0, 30.0);
10.         currentValue = dist(gen);
11.     }
12. }
13. double Sensor::convertKelvinToCelsius(double kelvin) {
14.     double celsium = kelvin - 273.15;
15.     return celsium;
16. } 
ДОДАТОК Б
1. bool loadValuesFromJson(std::string* fetchUrl, std::string* updateUrl, int* updateInterval) {
2.     std::ifstream settingsFile("settings.json");
3.     if (!settingsFile) {
4.         std::cerr << "Error: Could not open settings.json file!" << "\n";
5.         return false;
6.     }
7. 
8.     nlohmann::json settings;
9.     try {
10.         settingsFile >> settings;
11.     } catch (const nlohmann::json::parse_error& e) {
12.         std::cerr << "Error: Failed to parse settings.json - " << e.what() << "\n";
13.         return false;
14.     }
15. 
16.     *fetchUrl = settings.value("FetchSensorsUrl", "");
17.     *updateUrl = settings.value("SendSensorDataUrl", "");
18.     *updateInterval = settings.value("UpdateInterval", 5000);
19. 
20.     return true;
21. }
