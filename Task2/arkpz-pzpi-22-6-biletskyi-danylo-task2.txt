Харківський національний університет радіоелектроніки 
Факультет комп’ютерних наук 
Кафедра програмної інженерії 
 
 
 
 
ЗВІТ 
до лабораторного заняття №2 з дисципліни 
“Аналіз та рефакторинг коду” 
 
 
 
 
	Виконав:  	 	Перевірив: 
	ст. гр. ПЗПІ-22-6 	 	Ст. викл. кат. ПІ  
	Білецький Д. А. 	Сокорчук І.П. 
 
 
 
 
 
 
Харків 2024
1.	РОЗРОБКА БАЗИ ДАНИХ ДЛЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ ТА ПРИКЛАДНОГО ПРОГРАМНОГО ІНТЕРФЕЙСУ (АРІ)
2.	Мета роботи 
	Розробка бази даних для серверної частини програмної системи та прикладного програмного інтерфейсу 
3.	Хід роботи:
3.1. Розробити будову програмної системи:
Програмна система для зберігання медикаментів буде мати клієнт-серверну архітектуру. Вона буде реалізована за допомогою фреймворку ASP.NET Core мовою C#. Серверна частина буде відповідальна за обробку запитів, управління даними та взаємодію між різними частинами системи. В якості бази даних, буде використовуватися реляційна база даних PostgreSQL. Працівники зможуть керувати системою за допомогою веб сайту. Мобільний додаток буде використовуватися як інструмент для моніторингу. Автентифікація користувачів буде реалізована за допомогою JSON Web Tokens.
Модулі серверної частини:
1) Авторизація та автентифікація:
•	Реєстрація нових працівників;
•	Авторизація та автентифікація за допомогою JSON Web Token для безпечного доступу до системи.
2) Модуль управління медикаментами:
•	Додавання, перегляд, редагування та видалення інформації про медикаменти;
•	Додавання, перегляд, редагування та видалення інформації про поставки медикаметів.
3) Модуль управління сенсорами:
•	Створення, перегляд, редагування та видалення складів, де працюватимуть сенсори;
•	Створення, перегляд, редагування та видалення сенсорів;
•	Встановлення порогових значень для вологості та температури складів, котрі зчитуються сенсорами;
•	Збереження випадків порушення умов зберігання медикаментів на складах.
4) Модуль обробки даних ІоТ-сенсорів:
•	Отримання та обробка даних про рівень вологості та температуру у складському приміщенні.
•	Передача даних до серверної частини для подальшого опрацювання.
5) Модуль сповіщень:
•	Надсилання сповіщень на мобільний застосунок про порушення умов зберігання медикаментів;
6) Модуль  адміністрування:
•	Надання доступу адміністраторам до загальних налаштувань системи;
•	Видалення облікових записів працівників та зміна їх повноважень;
•	Редагування облікового запису працівника (скидання паролю).
7) Модуль клієнтської частини:
•	Перегляд даних про медикаменти та поставки;
•	Отримання сповіщень про порушення умов зберігання медикаментів;
•	Авторизація в системі.
 
3.2. Створити UML діаграму прецедентів для серверної частини:
UML діаграма прецедентів наведена у додатку А.
3.3. Створити ER діаграму даних:
 
Рисунок 1 – зображення ER діаграми даних

3.4. Розробити базу даних (БД) програмної системи:
Для даної програмної системи була розроблена реляційна база даних PostgreSQL за допомогою ORM Entity Framework. Він дозволяє формувати SQL скрипти за допомогою коду написаного на C# з використанням комоненту LINQ. Були створені наступні таблиці:
Таблиця 1 – Таблиця Medicines, що відповідає за зберігання препаратів
Назва колонки	Тип даних	Тип колонки	Опис
id	INTEGER	PRIMARY KEY	Ідентифікатор препарату
name	TEXT	ORDINARY DATA	Назва препарату
manufacturer	TEXT	ORDINARY DATA	Назва виробника препарату
description	TEXT	ORDINARY DATA	Опис препарату
max_temperature	REAL	ORDINARY DATA	Максимальна температура зберігання препарату
min_temperature	REAL	ORDINARY DATA	Мінімальна температура зберігання препарату
max_humidity	REAL	ORDINARY DATA	Максимальний рівень вологості зберігання препарату
min_humidity	REAL	ORDINARY DATA	Мінімальний рівень вологості зберігання препарату


Таблиця 2 – Таблиця Batches, що відповідає за зберігання поставок препаратів
Назва колонки	Тип даних	Тип колонки	Опис
id	INTEGER	PRIMARY KEY	Ідентифікатор поставки препарату
batch_number	TEXT	ORDINARY DATA	Номер поставки вказаний виробником
quantity	INTEGER	ORDINARY DATA	Кількість препарату в поставці
manufacture_date	TIMESTAMP	ORDINARY DATA	Дата вироблення
expiration_date	TIMESTAMP	ORDINARY DATA	Дата закінчення строку придатності
warehouse_id	INTEGER	FOREIGN KEY	Ідентифікатор складу, куди було завезено поставку
user_id	INTEGER	FOREIGN KEY	Ідентифікатор працівника, що зареєстрував поставку
medicine_id	INTEGER	FOREIGN KEY	Ідентифікатор препарату, поставку якого було здійснено

Таблиця 3 – Таблиця Users, що відповідає за зберігання облікових записів користувачів
Назва колонки	Тип даних	Тип колонки	Опис
id	INTEGER	PRIMARY KEY	Ідентифікатор користувача
first_name	TEXT	ORDINARY DATA	Ім’я користувача
last_name	TEXT	ORDINARY DATA	Прізвище користувача
email	TEXT	ORDINARY DATA	Електронна пошта користувача
password	TEXT	ORDINARY DATA	Пароль користувача
role	INTEGER	FOREIGN KEY	Номер ролі користувача

Таблиця 4 – Таблиця Warehouses, що відповідає за зберігання інформації про складські приміщення
Назва колонки	Тип даних	Тип колонки	Опис
id	INTEGER	PRIMARY KEY	Ідентифікатор складу
name	TEXT	ORDINARY DATA	Назва складу
address 	TEXT	ORDINARY DATA	Адреса складу
max_temperature	REAL	ORDINARY DATA	Максимальна температура дозволена на складі
min_temperature	REAL	ORDINARY DATA	Мінімальна температура дозволена на складі
max_humidity	REAL	ORDINARY DATA	Максимальний рівень вологості дозволений на складі
min_humidity	REAL	ORDINARY DATA	Мінімальний рівень вологості дозволений на складі
created_at	TIMESTAMP	ORDINARY DATA	Дата реєстрації складського приміщення


Таблиця 5 – Таблиця Sensors, що відповідає за зберігання інформації про сенсори в складських приміщеннях
Назва колонки	Тип даних	Тип колонки	Опис
id	INTEGER	PRIMARY KEY	Ідентифікатор сенсору
type 	INTEGER	ORDINARY DATA	Тип сенсора (температури чи вологості)
serial_number	TEXT	ORDINARY DATA	Серійний номер сенсору
warehouse_id	INTEGER	FOREIGN KEY	Ідентифікатор складу, куди був встановлений сенсор

Таблиця 6 – Таблиця StorageViolations, що відповідає за зберігання інформації про порушення умов зберігання на складах
Назва колонки	Тип даних	Тип колонки	Опис
id	INTEGER	PRIMARY KEY	Ідентифікатор порушення умов зберігання
temperature 	REAL	ORDINARY DATA	Зафіксоване значення температури під час порушення умов зберігання
humidity	REAL	ORDINARY DATA	Зафіксоване значення рівня вологості під час порушення умов зберігання
recorded_at	TIMESTAMP	ORDINARY DATA	Дата порушення умов зберігання
warehouse_id	INTEGER	FOREIGN KEY	Ідентифікатор складу, де було зафіксоване порушення

 
3.5. Створити діаграму структури БД:
 
Рисунок 2 – схема розробленої бази даних у програмі PgAdmin 4

3.6. Розробити функції для роботи з БД:
За допомогою ORM фреймворку Entity Framework були розроблені функції для роботи з базою даних. Для їх розробки було створено клас під назвою ApplicationDbContext, через який відбуваються всі взаємодії з базою даних. 
Для спрощення роботи та підтримки чистоти коду був використаний патерн «Репозиторій», за допомогою якого була досягнута ціль розподілу роботи, адже тепер доступ до бази даних відбувається лише до структук у межах певного репозиторію. В даній програмній системі, такими репозиторіями є: BatchRepository, MedicineRepository, SensorRepository, StorageViolationRepository, UserRepository та WarehouseRepository, в яких і реалізовані всі функції взаємодії з базою даних.
Приклад коду реалізації взаємодії серверу з базою даних наведений, в додатку Б.

3.7. Розробити АРІ для взаємодії серверної частини з клієнтами:
Був розроблений REST API для взаємодії серверної частини з клієнтами. Для його розробки використовувався фреймворк ASP.NET Core з використанням контролерів, котрі відповідають за реагування на http запити до серверу.
3.8. Створити специфікацію розробленого АРІ:
Була розроблена специфікація для створеного АРІ. Вона наведена нижче:
Тип запиту	Маршрут	Опис дії
POST	/api/Auth/Login	Авторизація користувача
POST	/api/Auth/Register	Реєстрація користувача
GET	/api/Batch/{id}	Запит на отримання поставки за певним ідентифікатором
DELETE	/api/Batch/{id}	Запит на видалення поставки за певним ідентифікатором
PUT	/api/Batch/{id}	Запит на оновлення даних поставки за певним ідентифікатором
POST	/api/Batch	Запит на створення поставки
GET	/api/Batch/{medicineId}/Medicine	Запит на отримання всіх поставок за ідентифікатором препарату
GET	/api/Medicine/{id}	Запит на отримання препарату за певним ідентифікатором
DELETE	/api/Medicine/{id}	Запит на видалення препарату за певним ідентифікатором
PUT	/api/Medicine/{id}	Запит на оновлення даних препарату за певним ідентифікатором
POST	/api/Medicine	Запит на створення нового препарату
GET	/api/Medicine	Запит на отримання всіх препаратів
GET	/api/Sensor/{id}	Запит на отримання сенсору за певним ідентифікатором
DELETE	/api/Sensor/{id}	Запит на видалення сенсору за певним ідентифікатором
PUT	/api/Sensor/{id}	Запит на оновлення даних сенсору за певним ідентифікатором
POST	/api/Sensor	Запит на створення ного сенсору
GET	/api/Sensor/{warehouseId}/Sensors	Запит на отримання всіх сенсорів за ідентифікатором складу
GET	/api/StorageViolation/{id}	Запит на отримання порушення умов зберігання за певним ідентифікатором
DELETE	/api/StorageViolation/{id}	Запит на видалення запису про порушення умов зберігання за певним ідентифікатором
POST	/api/StorageViolation	Запит на створення нового порушення умов зберігання
GET	/api/StorageViolation/{warehouseId}
/Violations	Запит на отримання всіх порушень умов зберігання для певного складу
GET	/api/User/{id}	Запит на отримання даних про користувача за певним ідентифікатором
DELETE	/api/User/{id}	Запит на видалення даних про користувача за певним ідентифікатором
PUT	/api/User/{id}	Запит на оновлення даних користувача за певним ідентифікатором
GET	/api/Warehouse/{id}	Запит на отримання даних складу за певним ідентифікатором
DELETE	/api/Warehouse/{id}	Запит на видалення даних складу за певним ідентифікатором
PUT	/api/Warehouse/{id}	Запит на оновлення даних складу за певним ідентифікатором
POST	/api/Warehouse	Запит на створення ногово складу
GET	/api/Warehouse	Запит на отримання всіх зареєстрованих складів

3.9. Створити програмну реалізацію розробленого АРІ та функцій роботи з БД:
Була розроблена програмна реалізація розробленого АРІ та були розроблені функції роботи з БД. Була реалізована логіка обробки запитів основних операцій, а саме додавання, отримання, редагування та видалення даних з бази даних.
Приклад коду, щодо реалізації взаємодії серверної частини з клієнтами, наведений в додатку В.

Висновок: 
В ході виконання даної лабораторної роботи було розроблено структуру програмної системи, створено UML та ER діаграми, а також діаграму структури бази даних. Була розроблена база даних, функції для роботи з базою даних, API для взаємодій та специфікацію API та програмна реалізація API.
Посилання на гітхаб:
https://github.com/NureBiletskyiDanylo/arkpz-pzpi-22-6-biletskyi-danylo/tree/main/Task2
Посилання на ютуб:
https://youtu.be/nswY5H6KmCo?feature=shared
 
ДОДАТОК А
Розроблена UML діаграма прецедентів:
 
Рисунок А.1 – Перша частина UML діаграми прецедентів
 
Рисунок А.2 – друга частина UML діаграми прецедентів
 
ДОДАТОК Б
Приклад коду реалізації репозиторію MedicineRepository, котрий відповідає за всі дії з базою даних для таблиці препаратів.
1. public class MedicineRepository(ApplicationDbContext context) : IMedicineRepository
2. {
3.     public async Task<Medicine?> GetMedicine(int id, bool tracking = true)
4.     {
5.         Medicine? medicine;
6.         if (!tracking)
7.         {
8.             medicine = await context.Medicines.AsNoTracking().FirstOrDefaultAsync(a => a.Id == id);
9.         }
10.         else
11.         {
12.             medicine = await context.Medicines.FirstOrDefaultAsync(a => a.Id == id);
13.         }
14.         return medicine;
15.     }
16. 
17.     public async Task<List<Medicine>> GetMedicines()
18.     {
19.         return await context.Medicines.ToListAsync();
20.     }
21. 
22.     public async Task<bool> AddMedicine(Medicine medicine)
23.     {
24.         await context.Medicines.AddAsync(medicine);
25.         var result = await context.SaveChangesAsync();
26.         return result != 0;
27.     }
28. 
29.     public async Task<bool> DeleteMedicine(Medicine medicine)
30.     {
31.         context.Medicines.Remove(medicine);
32.         var result = await context.SaveChangesAsync();
33.         return result != 0;
34.     }
35. 
36.     public async Task<bool> UpdateMedicine(Medicine newMedicine)
37.     {
38.         context.Entry(newMedicine).State = EntityState.Detached;
39.         context.Medicines.Update(newMedicine);
40.         var result = await context.SaveChangesAsync();
41.         return result != 0;
42.     }
43. }
 
ДОДАТОК В
Приклад коду реалізації контролеру WarehouseController, котрий відповідає за обробку всіх клієнтських запитів, що пов’язані з складом.
1. [Route("api/[controller]")]
2. [ApiController]
3. public class WarehouseController(IWarehouseRepository warehouseRepository) : ControllerBase
4. {
5.     /// <summary>
6.     /// Handles a request of getting a warehouse object by its id 
7.     /// </summary>
8.     /// <param name="id">Warehouse id<see cref="int"/></param>
9.     /// <returns>Warehouse object or a message with an error:<see cref="Task{IActionResult}"/></returns>
10.     [HttpGet]
11.     [Route("{id}")]
12.     [SwaggerOperation("Get warehouse object by it's id")]
13.     [ProducesResponseType(typeof(Warehouse), 200)]
14.     public async Task<IActionResult> GetWarehouse(int id)
15.     {
16.         var warehouse = await warehouseRepository.GetWarehouse(id);
17.         if (warehouse == null)
18.         {
19.             return NotFound($"Warehouse by id {id} was not found");
20.         }
21. 
22.         return Ok(warehouse);
23.     }
24. 
25.     /// <summary>
26.     /// Handles a request of creating a warehouse object on the server.
27.     /// </summary>
28.     /// <param name="model">JSON warehouse model that transforms into an object<see cref="WarehouseCreateModel"/></param>
29.     /// <returns>Successful result or an error: <see cref="Task{IActionResult}"/></returns>
30.     [HttpPost]
31.     [Route("")]
32.     [SwaggerOperation("Create warehouse object")]
33.     public async Task<IActionResult> CreateWarehouse([FromBody] WarehouseCreateModel model)
34.     {
35.         if (model == null)
36.         {
37.             return BadRequest($"Warehouse was not added, because data in request body was corrupted");
38.         }
39. 
40.         Warehouse warehouse = new Warehouse(model);
41.         bool result = await warehouseRepository.AddWarehouse(warehouse);
42.         if (!result) return BadRequest("Warehouse was not added successfully");
43.         return Ok();
44.     }
45. 
46.     /// <summary>
47.     /// Handles a request of deleting warehouse object from the server by its id
48.     /// </summary>
49.     /// <param name="id">Warehouse id<see cref="int"/></param>
50.     /// <returns>Ok or an error:<see cref="Task{IActionResult}"/></returns>
51.     [HttpDelete]
52.     [Route("{id}")]
53.     [SwaggerOperation("Delete warehouse object by it's id")]
54.     public async Task<IActionResult> DeleteWarehouse(int id)
55.     {
56.         Warehouse? warehouse = await warehouseRepository.GetWarehouse(id);
57.         if (warehouse == null)
58.         {
59.             return NotFound($"Warehouse by id {id} was not found and therefore can't be deleted");
60.         }
61. 
62.         bool result = await warehouseRepository.DeleteWarehouse(warehouse);
63.         if (!result) return BadRequest("Warehouse was not deleted successfully");
64.         return Ok();
65.     }
66. 
67.     /// <summary>
68.     /// Handles a request of updating a warehouse by its id and new model
69.     /// </summary>
70.     /// <param name="model">Warehouse updated data<see cref="WarehouseCreateModel"/></param>
71.     /// <param name="id">Warehouse id<see cref="int"/></param>
72.     /// <returns>Ok with warehouse object, or an error: <see cref="Task{IActionResult}"/></returns>
73.     [HttpPut]
74.     [Route("{id}")]
75.     [SwaggerOperation("Update warehouse object specified by it's id")]
76.     [ProducesResponseType(typeof(Warehouse), 200)]
77.     public async Task<IActionResult> UpdateWarehouse([FromBody] WarehouseCreateModel model, int id)
78.     {
79.         if (model == null)
80.         {
81.             return BadRequest("Coudln't get updated warehouse. Data was corrupted");
82.         }
83. 
84.         var oldWarehouse = await warehouseRepository.GetWarehouse(id, false);
85.         if (oldWarehouse == null)
86.         {
87.             return NotFound($"Warehouse by the specified Id:{id} doesn't exist");
88.         }
89. 
90.         Warehouse newWarehouse = new Warehouse(model);
91.         newWarehouse.Id = id;
92.         var result = await warehouseRepository.UpdateWarehouse(newWarehouse);
93.         if (!result) return BadRequest("Warehouse was not updated");
94.         return Ok(newWarehouse);
95.     }
96. 
97.     /// <summary>
98.     /// Handles a request of getting all warehouses
99.     /// </summary>
100.     /// <returns>Ok with a list of warehouses (inspite empty or not)<see cref="Task{IActionResult}"/></returns>
101.     [HttpGet]
102.     [Route("")]
103.     [SwaggerOperation("Get all warehouse objects")]
104.     [ProducesResponseType(typeof(List<Warehouse>), 200)]
105.     public async Task<IActionResult> GetWarehouses()
106.     {
107.         return Ok(await warehouseRepository.GetWarehouses());
108.     }
109. }
