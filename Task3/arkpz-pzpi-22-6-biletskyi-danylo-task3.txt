Харківський національний університет радіоелектроніки 
Факультет комп’ютерних наук 
Кафедра програмної інженерії 
 
 
 
 
ЗВІТ 
до лабораторного заняття №3 з дисципліни 
“Аналіз та рефакторинг коду” 
 
 
 
 
	Виконав:  	 	Перевірив: 
	ст. гр. ПЗПІ-22-6 	 	Ст. викл. кат. ПІ  
	Білецький Д. А. 	Сокорчук І.П. 
 
 
 
 
 
 
Харків 2024
1.	РОЗРОБКА БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ АДМІНІСТРУВАННЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ
2.	Мета роботи 
	Розробка бізнес-логкіи та функцій адміністрування серверної частини програмної системи. 
3.	Хід роботи:
3.1. Розробити бізнес-логіку серверної частини програмної системи:
В ході лабораторної роботи була розроблена бізнес-логіка серверної частини. Вона складається з таких частин, як:
1)	Авторизація та автентифікація працівників. Алгоритм:
1.1)	Працівник вводить дані облікового запису;
1.2)	При вдалому вході сервер передаєє JWT токен, що використовуєтсья для авторизації працівника;
1.3)	Працівник намагається надіслати запит, для якого він не має повноважень;
1.4)	Працівник отримує відповідь від сервера, про недостатнью кількість повноважень;
1.5)	Працівник намагається надіслати запит, для якого він має повноваження;
1.6)	Працівник отримує відповідь від сервера про успішний запит.
2)	Опрацювання даних з IoT сенсорів (температури та вологості):
 
2.1)	Сенсор надсилає температурні дані;
2.2)	Сервер перевіряє чи температура відповідає встановленим межам складського приміщення;
2.3)	Сервер зберігає температуру в базі даних;
2.4)	Сенсор надсилає дані вологості у вигляді абсолютної вологості у г/см3;
2.5)	Сервер за допомогою обчислень переводить абсолютну вологість у відносну вологість (вологість у відсотках);
2.6)	Сервер перевіряє чи відносна вологість відповідає встановленми межам складського приміщення;
2.7)	Сервер зберігає значення відносної вологості у базі даних.

3)	Повідомлення робітників про порушення умов зберігання на певному складі за допомогою розсилки електронною поштою:
3.1)	Сервер перевіряє чи дані знаходяться в межах умов зберігання складського приміщення;
3.2)	Сервер формує повідомлення з попередженням про порушення умов зберігання;
3.3)	Сервер надсилає повідомлення про порушення умов зберігання на пошту всім працівникам.

4)	Збереження історії всіх змін, які були застовані до умов зберігання медикаментів на складах (логування):
4.1)	Працівник змінив умови зберігання медикаментів у складі;
4.2)	Сервер сформував інформацію про зміну, включаючи пошту працівника, дата зміни та змінені дані;
4.3)	Сервер записав ці дані у файл логування.



3.2. Розробити функції адміністрування серверної частини програмної системи:
В ході лабораторної роботи були розроблені функції адміністрування серверної частини програмної системи та різні ролі користувачів, кожна з яких має специфічні функціональні можливості:
1)	Звичайний працівник складу. Такий працівник складу має поверхневий доступ до серверу, та може лише переглядати основні дані в системі. Функції:
-	Перегляд даних про медикаменти, поставки, склади, сенсори, порушення умов зберігання;
-	Отримання сповіщень, про порушення умов збергання.
2)	Менеджер складу. Такий працівник відповідальний за управління даними медикаментів на складі. Функції:
-	Перегляд даних про медикаменти, поставки, склади, сенсори, порушення умов зберігання;
-	Додавання нових препаратів, поставок, сенсорів;
-	Редагування та видалення даних про препарати, поставки чи сенсори;
3)	Адміністратор системи. Такий працівник має необмежений доступ до системи, та може взаємодіяти з її даними самовільно. Функції:
-	Повний доступ до перегляду, додавання, видалення та редагування даних, що знаходяться в базі даних;
-	Редагування акаунітв інших користувачів, та їх видалення;
-	Зміна умов зберігання медикаментів на складі; 
 
4)	Адміністратор бази даних. Такий працівник має додатковий доступ до бази даних, адже йому дозволено робити її резервні копії. Функції:
-	Повний доступ до перегляду, додавання, видалення та редагування даних, що знаходяться в базі даних;
-	Редагування акаунітв інших користувачів, та їх видалення;
-	Створення резервної копії бази даних.
4. Створити програмну реалізацію бізнес-логіки та функцій адміністрування серверної частини:
Була створена програмна реалізація для всіх наведених частин бізнес-логіки та функцій адміністрування серверної частини, за допомогою мови програмуваннс C#. 
Приклади коду програмної реалізації наведені в додатку Б.

Посилання на ютуб:
https://youtu.be/VsF_h1NJEoM
Посилання на гітхаб:
https://github.com/NureBiletskyiDanylo/arkpz-pzpi-22-6-biletskyi-danylo/tree/main/Task3

Висновок:
В ході виконання даної лабораторної роботи було розроблено бізнес-логіку та функції адміністрування серверної частини програмної системи. Були вчинені заходи для забезпечення автентифікації та авторизації користувачів за допомогою JSON Web Token.
 
ДОДАТОК А

Рисунок А.1 – UML діаграма діяльності для бізнес логіки з обробки даних переданих з IoT сенсору та надсилання повідомлення про порушення умов зберігання.




 
Рисунок А.2 – UML діаграма діяльності для бізнес логіки зі створення резервної копії бази даних.
 
 
Рисунок А.3 – UML діаграма взаємодії для серверної частини
 
ДОДАТОК Б
Приклад математичної обробки даних серверної частини, а саме обчислення відносної вологості (у відсотках) на основі переданої абсолютної вологості від IoT сенсору:
1. public class RelativeHumidityCalculationService
2. {
3.     const double empiricalCoefficientOfTempIncrease = 17.67;
4.     const double differenceBetweenKelvinAndCelsius = 243.5;
5.     const double saturationAt0Degrees = 6.112;
6.     public float CalculateRelativeHumidity(double temperature, double absoluteHumidity)
7.     {
8.         double saturationVaporPressure = saturationAt0Degrees * 
9.             Math.Exp((empiricalCoefficientOfTempIncrease * temperature) 
10.             / (temperature + differenceBetweenKelvinAndCelsius));
11.         double dewPoint = CalculateDewPoint(absoluteHumidity);
12.         double actualVaporPressure = saturationAt0Degrees * 
13.             Math.Exp((empiricalCoefficientOfTempIncrease * dewPoint) 
14.             / (dewPoint + differenceBetweenKelvinAndCelsius));
15.         return (float)((actualVaporPressure / saturationVaporPressure) * 100);
16.     }
17.     private double CalculateDewPoint(double absoluteHumidity)
18.     {
19. 
20.         double gamma = Math.Log((absoluteHumidity / saturationAt0Degrees) + 1);
21.         double dewPoint = (differenceBetweenKelvinAndCelsius * gamma) 
22.             / (empiricalCoefficientOfTempIncrease - gamma);
23.         return dewPoint;
24.     }
25. }

Приклад коду функції адміністрування серверної частини, а саме створення резервної копії бази даних:
1. public void CreateBackup(string backupFilePath)
2. {
3.     var builder = new Npgsql.NpgsqlConnectionStringBuilder(_connectionString);
4. 
5.     string host = builder.Host;
6.     string port = builder.Port.ToString();
7.     string dbName = builder.Database;
8.     string username = builder.Username;
9.     string password = builder.Password;
10.     Environment.SetEnvironmentVariable("PGPASSWORD", password);
11.     string pgDumpPath = @"C:\Program Files\PostgreSQL\17\bin\pg_dump.exe";
12.     string arguments = $"-U {username} -h {host} -p {port} {dbName} -f \"{backupFilePath}\"";
13.     var process = new Process
14.     {
15.         StartInfo = new ProcessStartInfo
16.         {
17.             FileName = pgDumpPath,
18.             Arguments = arguments,
19.             RedirectStandardError = true,
20.             UseShellExecute = false,
21.             CreateNoWindow = true
22.         }
23.     };
24.     try
25.     {
26.         process.Start();
27.         process.WaitForExit();
28.         if (process.ExitCode != 0)
29.         {
30.             string error = process.StandardError.ReadToEnd();
31.             throw new Exception($"Backup failed: {error}");
32.         }
33.     }
34.     finally
35.     {
36.         Environment.SetEnvironmentVariable("PGPASSWORD", null);
37.     }
38.     
